{"ast":null,"code":"import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { timer } from '../observable/timer';\nexport function repeat(countOrConfig) {\n  var _a;\n\n  var count = Infinity;\n  var delay;\n\n  if (countOrConfig != null) {\n    if (typeof countOrConfig === 'object') {\n      _a = countOrConfig.count, count = _a === void 0 ? Infinity : _a, delay = countOrConfig.delay;\n    } else {\n      count = countOrConfig;\n    }\n  }\n\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var soFar = 0;\n    var sourceSub;\n\n    var resubscribe = function () {\n      sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();\n      sourceSub = null;\n\n      if (delay != null) {\n        var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\n        var notifierSubscriber_1 = new OperatorSubscriber(subscriber, function () {\n          notifierSubscriber_1.unsubscribe();\n          subscribeToSource();\n        });\n        notifier.subscribe(notifierSubscriber_1);\n      } else {\n        subscribeToSource();\n      }\n    };\n\n    var subscribeToSource = function () {\n      var syncUnsub = false;\n      sourceSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n        if (++soFar < count) {\n          if (sourceSub) {\n            resubscribe();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.complete();\n        }\n      }));\n\n      if (syncUnsub) {\n        resubscribe();\n      }\n    };\n\n    subscribeToSource();\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/repeat.ts"],"names":[],"mappings":"AACA,SAAS,KAAT,QAAsB,qBAAtB;AACA,SAAS,OAAT,QAAwB,cAAxB;AAEA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,SAAT,QAA0B,yBAA1B;AACA,SAAS,KAAT,QAAsB,qBAAtB;AAyGA,OAAM,SAAU,MAAV,CAAoB,aAApB,EAAyD;;;AAC7D,MAAI,KAAK,GAAG,QAAZ;AACA,MAAI,KAAJ;;AAEA,MAAI,aAAa,IAAI,IAArB,EAA2B;AACzB,QAAI,OAAO,aAAP,KAAyB,QAA7B,EAAuC;AAClC,MAAA,EAAA,GAA4B,aAAa,CAAzB,KAAhB,EAAA,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,QAAH,GAAW,EAAhB,EAAkB,KAAK,GAAK,aAAa,CAAlB,KAA1B;AACD,KAFD,MAEO;AACL,MAAA,KAAK,GAAG,aAAR;AACD;AACF;;AAED,SAAO,KAAK,IAAI,CAAT,GACH,YAAA;AAAM,WAAA,KAAA;AAAK,GADR,GAEH,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AACzB,QAAI,KAAK,GAAG,CAAZ;AACA,QAAI,SAAJ;;AAEA,QAAM,WAAW,GAAG,YAAA;AAClB,MAAA,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAA,SAAS,CAAE,WAAX,EAAA;AACA,MAAA,SAAS,GAAG,IAAZ;;AACA,UAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,YAAM,QAAQ,GAAG,OAAO,KAAP,KAAiB,QAAjB,GAA4B,KAAK,CAAC,KAAD,CAAjC,GAA2C,SAAS,CAAC,KAAK,CAAC,KAAD,CAAN,CAArE;AACA,YAAM,oBAAkB,GAAG,IAAI,kBAAJ,CAAuB,UAAvB,EAAmC,YAAA;AAC5D,UAAA,oBAAkB,CAAC,WAAnB;AACA,UAAA,iBAAiB;AAClB,SAH0B,CAA3B;AAIA,QAAA,QAAQ,CAAC,SAAT,CAAmB,oBAAnB;AACD,OAPD,MAOO;AACL,QAAA,iBAAiB;AAClB;AACF,KAbD;;AAeA,QAAM,iBAAiB,GAAG,YAAA;AACxB,UAAI,SAAS,GAAG,KAAhB;AACA,MAAA,SAAS,GAAG,MAAM,CAAC,SAAP,CACV,IAAI,kBAAJ,CAAuB,UAAvB,EAAmC,SAAnC,EAA8C,YAAA;AAC5C,YAAI,EAAE,KAAF,GAAU,KAAd,EAAqB;AACnB,cAAI,SAAJ,EAAe;AACb,YAAA,WAAW;AACZ,WAFD,MAEO;AACL,YAAA,SAAS,GAAG,IAAZ;AACD;AACF,SAND,MAMO;AACL,UAAA,UAAU,CAAC,QAAX;AACD;AACF,OAVD,CADU,CAAZ;;AAcA,UAAI,SAAJ,EAAe;AACb,QAAA,WAAW;AACZ;AACF,KAnBD;;AAqBA,IAAA,iBAAiB;AAClB,GAzCM,CAFX;AA4CD","sourceRoot":"","sourcesContent":["import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { timer } from '../observable/timer';\nexport function repeat(countOrConfig) {\n    var _a;\n    var count = Infinity;\n    var delay;\n    if (countOrConfig != null) {\n        if (typeof countOrConfig === 'object') {\n            (_a = countOrConfig.count, count = _a === void 0 ? Infinity : _a, delay = countOrConfig.delay);\n        }\n        else {\n            count = countOrConfig;\n        }\n    }\n    return count <= 0\n        ? function () { return EMPTY; }\n        : operate(function (source, subscriber) {\n            var soFar = 0;\n            var sourceSub;\n            var resubscribe = function () {\n                sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();\n                sourceSub = null;\n                if (delay != null) {\n                    var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(soFar));\n                    var notifierSubscriber_1 = new OperatorSubscriber(subscriber, function () {\n                        notifierSubscriber_1.unsubscribe();\n                        subscribeToSource();\n                    });\n                    notifier.subscribe(notifierSubscriber_1);\n                }\n                else {\n                    subscribeToSource();\n                }\n            };\n            var subscribeToSource = function () {\n                var syncUnsub = false;\n                sourceSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n                    if (++soFar < count) {\n                        if (sourceSub) {\n                            resubscribe();\n                        }\n                        else {\n                            syncUnsub = true;\n                        }\n                    }\n                    else {\n                        subscriber.complete();\n                    }\n                }));\n                if (syncUnsub) {\n                    resubscribe();\n                }\n            };\n            subscribeToSource();\n        });\n}\n//# sourceMappingURL=repeat.js.map"]},"metadata":{},"sourceType":"module"}