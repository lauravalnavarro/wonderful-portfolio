{"ast":null,"code":"import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nexport default class ScrollService {\n  constructor() {\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      let elementTop = rec.top;\n      let elementBottom = rec.Bottom;\n      let partiallyVisible = elementTop < window.innerHeight && elementBottom >= 0;\n      let completelVisible = elementTop >= 0 && elementBottom <= window.innerHeight;\n\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n\n        case \"complete\":\n          return completelVisible;\n\n        default:\n          return false;\n      }\n    };\n\n    this.checkCurrentScreenUnderViewPort = event => {\n      if (!event || Object.keys(event).length < 1) return;\n\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDom = document.getElementById(screen.screen_name);\n        if (!screenFromDom) continue;\n        let fullyVisible = this.isElementInView(screenFromDom, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDom, \"partial\");\n\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen[\"alreadyRendered\"] = true;\n            break;\n          }\n\n          if (fullyVisible) {\n            ScrollService.currentScreenBroadcaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewPort);\n  }\n\n}\nScrollService.scrollService = new ScrollService();\nScrollService.currentScreenBroadcaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"sources":["/Users/galapago/Documents/Personal/Wonderful/src/utilities/ScrollService.js"],"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elementBottom","Bottom","partiallyVisible","window","innerHeight","completelVisible","checkCurrentScreenUnderViewPort","event","Object","keys","length","screen","screenFromDom","document","getElementById","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadcaster","screenInView","addEventListener","scrollService"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AACA,SAASC,OAAT,QAAwB,MAAxB;AAEA,eAAe,MAAMC,aAAN,CAAoB;AAKjCC,EAAAA,WAAW,GAAG;AAAA,SAIdC,eAJc,GAII,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAChC,UAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAL,EAAV;AACA,UAAIC,UAAU,GAAGF,GAAG,CAACG,GAArB;AACA,UAAIC,aAAa,GAAGJ,GAAG,CAACK,MAAxB;AAEA,UAAIC,gBAAgB,GAClBJ,UAAU,GAAGK,MAAM,CAACC,WAApB,IAAmCJ,aAAa,IAAI,CADtD;AAEA,UAAIK,gBAAgB,GAClBP,UAAU,IAAI,CAAd,IAAmBE,aAAa,IAAIG,MAAM,CAACC,WAD7C;;AAGA,cAAQT,IAAR;AACE,aAAK,SAAL;AACE,iBAAOO,gBAAP;;AAEF,aAAK,UAAL;AACE,iBAAOG,gBAAP;;AAEF;AACE,iBAAO,KAAP;AARJ;AAUD,KAxBa;;AAAA,SAyBdC,+BAzBc,GAyBqBC,KAAD,IAAW;AAC3C,UAAI,CAACA,KAAD,IAAUC,MAAM,CAACC,IAAP,CAAYF,KAAZ,EAAmBG,MAAnB,GAA4B,CAA1C,EAA6C;;AAC7C,WAAK,IAAIC,MAAT,IAAmBtB,aAAnB,EAAkC;AAChC,YAAIuB,aAAa,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,MAAM,CAACI,WAA/B,CAApB;AACA,YAAI,CAACH,aAAL,EAAoB;AAEpB,YAAII,YAAY,GAAG,KAAKvB,eAAL,CAAqBmB,aAArB,EAAoC,UAApC,CAAnB;AACA,YAAIV,gBAAgB,GAAG,KAAKT,eAAL,CAAqBmB,aAArB,EAAoC,SAApC,CAAvB;;AACA,YAAII,YAAY,IAAId,gBAApB,EAAsC;AACpC,cAAIA,gBAAgB,IAAI,CAACS,MAAM,CAACM,eAAhC,EAAiD;AAC/C1B,YAAAA,aAAa,CAAC2B,mBAAd,CAAkCC,IAAlC,CAAuC;AACrCC,cAAAA,YAAY,EAAET,MAAM,CAACI;AADgB,aAAvC;AAGAJ,YAAAA,MAAM,CAAC,iBAAD,CAAN,GAA4B,IAA5B;AACA;AACD;;AACD,cAAIK,YAAJ,EAAkB;AAChBzB,YAAAA,aAAa,CAAC8B,wBAAd,CAAuCF,IAAvC,CAA4C;AAC1CG,cAAAA,YAAY,EAAEX,MAAM,CAACI;AADqB,aAA5C;AAGA;AACD;AACF;AACF;AACF,KAjDa;;AACZZ,IAAAA,MAAM,CAACoB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKjB,+BAAvC;AACD;;AAPgC;AAAdf,a,CACZiC,a,GAAgB,IAAIjC,aAAJ,E;AADJA,a,CAEZ8B,wB,GAA2B,IAAI/B,OAAJ,E;AAFfC,a,CAGZ2B,mB,GAAsB,IAAI5B,OAAJ,E","sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\n\nexport default class ScrollService {\n  static scrollService = new ScrollService();\n  static currentScreenBroadcaster = new Subject();\n  static currentScreenFadeIn = new Subject();\n\n  constructor() {\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewPort);\n  }\n\n  isElementInView = (elem, type) => {\n    let rec = elem.getBoundingClientRect();\n    let elementTop = rec.top;\n    let elementBottom = rec.Bottom;\n\n    let partiallyVisible =\n      elementTop < window.innerHeight && elementBottom >= 0;\n    let completelVisible =\n      elementTop >= 0 && elementBottom <= window.innerHeight;\n\n    switch (type) {\n      case \"partial\":\n        return partiallyVisible;\n\n      case \"complete\":\n        return completelVisible;\n\n      default:\n        return false;\n    }\n  };\n  checkCurrentScreenUnderViewPort = (event) => {\n    if (!event || Object.keys(event).length < 1) return;\n    for (let screen of TOTAL_SCREENS) {\n      let screenFromDom = document.getElementById(screen.screen_name);\n      if (!screenFromDom) continue;\n\n      let fullyVisible = this.isElementInView(screenFromDom, \"complete\");\n      let partiallyVisible = this.isElementInView(screenFromDom, \"partial\");\n      if (fullyVisible || partiallyVisible) {\n        if (partiallyVisible && !screen.alreadyRendered) {\n          ScrollService.currentScreenFadeIn.next({\n            fadeInScreen: screen.screen_name,\n          });\n          screen[\"alreadyRendered\"] = true;\n          break;\n        }\n        if (fullyVisible) {\n          ScrollService.currentScreenBroadcaster.next({\n            screenInView: screen.screen_name,\n          });\n          break;\n        }\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}